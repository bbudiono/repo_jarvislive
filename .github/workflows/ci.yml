name: CI/CD Pipeline - Jarvis Live Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.10'
  XCODE_VERSION: '15.0'

jobs:
  python-quality-gate:
    name: Python Backend Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('_python/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      working-directory: _python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run Black formatter check
      working-directory: _python
      run: |
        black --check --diff .
        
    - name: Run isort import sorting check
      working-directory: _python
      run: |
        isort --check-only --diff .
        
    - name: Run Flake8 linting
      working-directory: _python
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Run MyPy type checking
      working-directory: _python
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: Run Python unit tests
      working-directory: _python
      run: |
        python run_minimal_ci_tests.py
        
    - name: Run Python performance tests (non-blocking)
      working-directory: _python
      run: |
        python -m pytest tests/performance/test_benchmark_micro.py -v || echo "Performance tests failed, but not blocking CI"
        
    - name: Upload Python test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results
        path: _python/test-results/

  ios-quality-gate:
    name: iOS Quality Gate
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
      
    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v3
      with:
        path: |
          _iOS/.build
          ~/.cache/org.swift.swiftpm/
        key: ${{ runner.os }}-spm-${{ hashFiles('_iOS/Package.swift', '_iOS/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
          
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint on Sandbox
      working-directory: _iOS/JarvisLive-Sandbox
      run: |
        swiftlint lint --reporter github-actions-logging
        
    - name: Run SwiftLint on Production
      working-directory: _iOS/JarvisLive
      run: |
        swiftlint lint --reporter github-actions-logging
        
    - name: Build Sandbox iOS Project
      working-directory: _iOS
      run: |
        swift build --configuration debug
        
    - name: Build and Test Sandbox iOS Project
      working-directory: _iOS/JarvisLive-Sandbox
      run: |
        # Build first to check for compilation errors
        xcodebuild build \
          -project JarvisLive-Sandbox.xcodeproj \
          -scheme JarvisLive-Sandbox \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest'
        
        # Run tests if build succeeds
        xcodebuild test \
          -project JarvisLive-Sandbox.xcodeproj \
          -scheme JarvisLive-Sandbox \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
          -resultBundlePath TestResults-Sandbox.xcresult \
          -enableCodeCoverage YES || echo "Some tests failed, but continuing"
          
    - name: Build Production iOS Project (compilation check)
      working-directory: _iOS/JarvisLive
      run: |
        # Just check that production code compiles
        xcodebuild build \
          -project JarvisLive.xcodeproj \
          -scheme JarvisLive \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' || echo "Production build check completed"
          
    - name: Upload iOS test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ios-test-results
        path: |
          _iOS/JarvisLive-Sandbox/TestResults-Sandbox.xcresult
          _iOS/JarvisLive/TestResults-Production.xcresult

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [python-quality-gate]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      working-directory: _python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run comprehensive E2E test suite
      working-directory: _python
      run: |
        python run_e2e_tests.py --category all --timeout 600
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: _python/e2e-test-results/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [python-quality-gate]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      working-directory: _python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Start Python backend server
      working-directory: _python
      run: |
        python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run integration tests
      working-directory: _python
      run: |
        python -m pytest tests/test_api_endpoints.py -v
        
    - name: Run E2E test suite
      working-directory: _python
      run: |
        python run_e2e_tests.py --category health
        python run_e2e_tests.py --category api
        
    - name: Health check API endpoints
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/docs || exit 1

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      working-directory: _python
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o security-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: _python/security-report.json

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [python-quality-gate, ios-quality-gate, e2e-tests, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Check quality gate results
      run: |
        echo "=== QUALITY GATE SUMMARY ==="
        echo "Python Quality Gate: ${{ needs.python-quality-gate.result }}"
        echo "iOS Quality Gate: ${{ needs.ios-quality-gate.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.python-quality-gate.result }}" != "success" || \
              "${{ needs.ios-quality-gate.result }}" != "success" || \
              "${{ needs.e2e-tests.result }}" != "success" || \
              "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ QUALITY GATE FAILED - Blocking merge"
          exit 1
        else
          echo "✅ ALL QUALITY GATES PASSED - Merge approved"
        fi
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const results = {
            python: '${{ needs.python-quality-gate.result }}',
            ios: '${{ needs.ios-quality-gate.result }}',
            e2e: '${{ needs.e2e-tests.result }}',
            integration: '${{ needs.integration-tests.result }}',
            security: '${{ needs.security-scan.result }}'
          };
          
          const passed = Object.values(results).every(r => r === 'success');
          const status = passed ? '✅ PASSED' : '❌ FAILED';
          
          const body = `## Quality Gate Results ${status}
          
          | Check | Status |
          |-------|--------|
          | Python Backend | ${results.python === 'success' ? '✅' : '❌'} |
          | iOS Application | ${results.ios === 'success' ? '✅' : '❌'} |
          | E2E Tests | ${results.e2e === 'success' ? '✅' : '❌'} |
          | Integration Tests | ${results.integration === 'success' ? '✅' : '❌'} |
          | Security Scan | ${results.security === 'success' ? '✅' : '❌'} |
          
          ${passed ? 'All quality gates passed! 🚀' : 'Quality gate failures detected. Please review and fix issues before merging.'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });